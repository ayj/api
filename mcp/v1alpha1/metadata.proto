// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.mcp.v1alpha1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package="istio.io/api/mcp/v1alpha1";
option (gogoproto.equal_all) = true;

// Metadata information that all resources within the Mesh Configuration Protocol must have.
message Metadata {
  // Fully qualified name of the resource. Unique in context of a collection.
  //
  // The FQ name consists of path segments which includes the resources
  // location in a resource hierarchy. On k8s, this hierarchy is
  // two-levels: cluster and namespace, e.g.
  //
  //   namespaced     => <k8s-namespace>/<k8s-name>
  //   cluster-scoped =>                /<k8s-name>
  //
  // Deeper hierarchy could also be represented, e.g.
  //
  //        <org>/<team>/<name>
  //
  // “/” are used as the standard delimiter. The rightmost segment is
  // the most specific identifier (e.g. leaf). Segments moving towards the left
  // represent higher positions in the resource hierarchy, similar to reverse
  // DNS notation.
  string name = 1;

  // The creation timestamp of the resource.
  google.protobuf.Timestamp create_time = 2;

  // Resource version. This is used to determine when resources change across
  // resource updates. It should be treated as opaque by consumers/sinks.
  string version = 3;

  // Map of string keys and values that can be used to organize and categorize
  // resources within a collection.
  map<string,string> labels = 4;

  // Map of string keys and values that can be used by source and sink to communicate
  // arbitrary metadata about this resource.
  map<string,string> annotations = 5;
}
