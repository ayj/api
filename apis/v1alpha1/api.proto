// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.apis.v1alpha1;

option go_package="istio.io/api/apis/v1alpha1";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// SchemeSource defines the source for an API schema.
message SchemaSource {
  // External URL reference to source API schema. The reference is
  // expected to be immutable and valid for the lifetime of the
  // SchemeSource and encompassing API specification. Changing the
  // referenced spec after the reference is submitted is undefined
  // behavior.
  string external = 1;

  // String inlined in the configuration. Binary data should be base64
  // encoded.
  string inline_string = 2;
}

// [OpenAPI v2](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
message OpenApiv2 {
  SchemaSource schema_source = 1;
}

// [OpenAPI v3](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
message OpenApiv3 {
  SchemaSource schema_source = 1;
}

// A protobuf descriptor set for a gRPC service.
message Grpc {
  SchemaSource schema_source = 1;

  // Select the set of services in the descriptor set that this grpc
  // definition references. A descriptor set may include multiple
  // service definitions, due to dependencies, but only a subset of
  // them are served by the specified backend.
  repeated string selected_services = 2;
}

// API configuration for describing the API surface of a (sub)set of
// services. These API descriptions are used to generate API related
// attibutes and enable other API management features,
// e.g. transcoding (when applicable), unify discovery of API services
// within the mesh. Security definitions, extensions, etc. are
// preserved but not used by Istio.
//
//   apiVersion: apis.istio.io/v1alpha1
//     kind: HttpApi
//     metadata:
//       name: petstore
//     spec:
//       openapiv2:
//         sourceSchema:
//           external: https://github.com/googleapis/gnostic/blob/master/examples/v2.0/yaml/petstore-simple.yaml
//
message HttpApi {
  oneof type {
    HttpGeneric generic = 1;
    OpenApiv2 openapiv2 = 2;
    OpenApiv3 openapiv3 = 3;
    Grpc grpc = 4;
  }

  // List of destination services that this API is bound to.
  repeated Destination destinations = 5;

  // OpenApi and gRPC may be normalized to generic HTTP for API
  // attribute generation. This could be hidden from the
  // user. Alternatively, it might be useful to reflect this back into
  // the user-facing configuration resource to aid in debugability.
  HttpGeneric normalized_http = 6;
}

// TODO - This is conceptually similar to the routing API's notion of
// named subsets.  Should we reuse those types, or duplicate the types
// customized for our purposes?
//
// This needs to allow for binding an API to a service (i.e. host),
// named subsets using labels, and/or edge proxy (gateway/ingress).
message Destination {
}
